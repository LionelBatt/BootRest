name: Travel Agency CI/CD with Maven and EC2 Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-3
  S3_BUCKET: prod-resto
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  APP_VERSION: 1.0.1-SNAPSHOT

jobs:
  test:
    runs-on: ubuntu-latest
    name: Tests et Qualité du Code
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: ☕ Configuration JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 📦 Cache des dépendances Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🧪 Exécution des tests
      run: mvn -B test --file pom.xml
      
  build:
    runs-on: ubuntu-latest
    needs: test
    name: Construction de l'application
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: ☕ Configuration JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 📦 Cache des dépendances Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🔨 Construction avec Maven
      run: mvn -B package -DskipTests --file pom.xml

    - name: 📋 Vérification de l'artifact
      run: |
        ls -la target/
        echo "JAR créé: $(ls target/*.jar | grep -v original)"

    - name: 💾 Sauvegarde de l'artifact
      uses: actions/upload-artifact@v4
      with:
        name: travel-agency-jar
        path: target/travel-agency-${{ env.APP_VERSION }}.jar
        retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Déploiement sur EC2
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 📦 Récupération de l'artifact
      uses: actions/download-artifact@v4
      with:
        name: travel-agency-jar
        path: ./

    - name: 🔧 Configuration des credentials AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🪣 Création du bucket S3 temporaire
      run: |
        BUCKET_NAME="travel-agency-deploy-$(date +%Y%m%d%H%M%S)"
        echo "S3_BUCKET_TEMP=$BUCKET_NAME" >> $GITHUB_ENV
        
        # Créer le bucket
        aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
        
        # Désactiver le blocage d'accès public
        aws s3api put-public-access-block \
          --bucket $BUCKET_NAME \
          --public-access-block-configuration \
          "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
        
        # Configurer la politique pour accès public temporaire
        aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::'$BUCKET_NAME'/app/*"
            }
          ]
        }'
        
        echo "✅ Bucket S3 temporaire créé: $BUCKET_NAME"

    - name: 🔑 Configuration de la clé SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $(aws ec2 describe-instances --instance-ids ${{ env.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text) >> ~/.ssh/known_hosts

    - name: 📤 Upload JAR vers S3
      run: |
        aws s3 cp travel-agency-${{ env.APP_VERSION }}.jar s3://${{ env.S3_BUCKET_TEMP }}/app/
        echo "✅ JAR uploadé vers S3: ${{ env.S3_BUCKET_TEMP }}"

    - name: 📝 Création du script de déploiement
      run: |
        cat > deploy_embedded.sh << EOF
        #!/bin/bash
        set -e
        
        # Configuration
        APP_NAME="travel-agency"
        CONTAINER_NAME="travel-agency-app"
        IMAGE_NAME="travel-agency:latest"
        APP_DIR="/opt/travel-agency"
        LOGS_DIR="/var/log/travel-agency"
        DATA_DIR="/var/lib/travel-agency"
        S3_BUCKET="${{ env.S3_BUCKET_TEMP }}"
        AWS_REGION="${{ env.AWS_REGION }}"
        JAR_FILE="travel-agency-${{ env.APP_VERSION }}.jar"
        
        echo "🚀 Début du déploiement Travel Agency..."
        
        # Créer les répertoires
        sudo mkdir -p "\$APP_DIR" "\$LOGS_DIR" "\$DATA_DIR"
        sudo chown -R 1000:1000 "\$LOGS_DIR" "\$DATA_DIR"
        cd "\$APP_DIR"
        
        # Arrêter le conteneur existant
        if docker ps -q -f name="\$CONTAINER_NAME" | grep -q .; then
            echo "🛑 Arrêt du conteneur existant..."
            docker stop "\$CONTAINER_NAME" || true
            docker rm "\$CONTAINER_NAME" || true
        fi
        
        # Télécharger le JAR depuis S3 (bucket public temporaire)
        echo "📥 Téléchargement du JAR depuis S3..."
        JAR_URL="https://s3.\$AWS_REGION.amazonaws.com/\$S3_BUCKET/app/\$JAR_FILE"
        echo "🔗 URL: \$JAR_URL"
        
        sudo curl -f -L -o "\$JAR_FILE" "\$JAR_URL"
        
        # Vérifier le téléchargement
        if [[ ! -f "./\$JAR_FILE" ]]; then
            echo "❌ Erreur: JAR non téléchargé"
            exit 1
        fi
        
        echo "✅ JAR téléchargé: \$(ls -lh \$JAR_FILE)"
        
        # Créer le Dockerfile
        echo "📝 Création du Dockerfile..."
        cat > Dockerfile << 'DOCKERFILE_END'
        FROM openjdk:21-jdk-slim
        RUN groupadd -r appuser && useradd -r -g appuser appuser
        WORKDIR /app
        RUN mkdir -p /app/logs /app/data && chown -R appuser:appuser /app
        COPY travel-agency-1.0.1-SNAPSHOT.jar app.jar
        RUN chown appuser:appuser app.jar
        USER appuser
        EXPOSE 8080
        VOLUME ["/app/logs", "/app/data"]
        ENV SERVER_PORT=8080 LOGGING_LEVEL_ROOT=INFO LOGGING_FILE_PATH=/app/logs/application.log JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC"
        ENTRYPOINT ["sh", "-c", "java \$JAVA_OPTS -jar /app/app.jar"]
        DOCKERFILE_END
        
        # Construire l'image Docker
        echo "🔨 Construction de l'image Docker..."
        docker build -t "\$IMAGE_NAME" .
        
        # Démarrer le conteneur
        echo "🚀 Démarrage du conteneur..."
        docker run -d \
            --name "\$CONTAINER_NAME" \
            --restart unless-stopped \
            -p 8080:8080 \
            -v "\$LOGS_DIR:/app/logs" \
            -v "\$DATA_DIR:/app/data" \
            -e SERVER_PORT=8080 \
            -e LOGGING_FILE_PATH=/app/logs/application.log \
            -e LOGGING_LEVEL_ROOT=INFO \
            -e "DB_URL=jdbc:h2:mem:travel_prod" \
            -e "DB_USER=sa" \
            -e "JWT_SECRET=change_this_secret_in_production" \
            -e "MAIL_HOST=smtp.gmail.com" \
            -e "MAIL_PORT=587" \
            "\$IMAGE_NAME"
        
        # Vérifier le déploiement
        echo "🔍 Vérification du déploiement..."
        sleep 10
        if docker ps | grep "\$CONTAINER_NAME" > /dev/null; then
            echo "✅ Conteneur démarré avec succès"
            PUBLIC_IP=\$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            echo "🌐 Application disponible sur : http://\$PUBLIC_IP:8080/travel"
            docker logs --tail 10 "\$CONTAINER_NAME"
        else
            echo "❌ Erreur lors du démarrage du conteneur"
            docker logs "\$CONTAINER_NAME"
            exit 1
        fi
        
        echo "🎉 Déploiement terminé avec succès !"
        EOF
        
        chmod +x deploy_embedded.sh

    - name: 🚀 Déploiement sur EC2
      run: |
        # Récupérer l'IP publique de l'instance EC2
        EC2_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "🌐 IP de l'instance EC2: $EC2_IP"
        echo "🔑 Déploiement via SSH..."
        
        # Exécuter via SSH
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no deploy_embedded.sh ubuntu@$EC2_IP:/tmp/
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP "bash /tmp/deploy_embedded.sh"
        
        echo "🎉 Déploiement terminé avec succès !"

    - name: 🏥 Vérification de santé de l'application
      run: |
        # Récupérer l'IP publique de l'instance EC2
        EC2_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "🌐 IP de l'instance EC2: $EC2_IP"
        
        # Attendre que l'application soit prête
        echo "⏳ Vérification de la santé de l'application..."
        for i in {1..30}; do
          if curl -f "http://$EC2_IP:8080/travel/api/test/all" > /dev/null 2>&1; then
            echo "✅ Application Docker accessible et fonctionnelle !"
            echo "🌐 URL: http://$EC2_IP:8080/travel"
            echo "📚 Swagger: http://$EC2_IP:8080/travel/swagger-ui/index.html"
            echo "🐳 Container status: $(ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'docker ps -f name=travel-agency-app --format "table {{.Names}}\t{{.Status}}"')"
            exit 0
          fi
          echo "⏳ Tentative $i/30..."
          sleep 10
        done
        
        echo "❌ L'application ne répond pas après 5 minutes"
        echo "🔍 Status du container:"
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'docker ps -a && docker logs travel-agency-app --tail 20'
        exit 1

    - name: 🧹 Nettoyage du bucket temporaire
      if: always()
      run: |
        if [ ! -z "${{ env.S3_BUCKET_TEMP }}" ]; then
          echo "🧹 Suppression du bucket temporaire: ${{ env.S3_BUCKET_TEMP }}"
          aws s3 rm s3://${{ env.S3_BUCKET_TEMP }} --recursive || true
          aws s3 rb s3://${{ env.S3_BUCKET_TEMP }} || true
          echo "✅ Bucket temporaire supprimé"
        fi
