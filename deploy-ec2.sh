#!/bin/bash

# Script de d√©ploiement EC2 pour l'application Resto avec Docker
# √Ä ex√©cuter sur l'instance EC2 cible

set -e

# Configuration
APP_NAME="travel-agency"
CONTAINER_NAME="travel-agency-app"
IMAGE_NAME="travel-agency:latest"
APP_DIR="/opt/travel-agency"
LOGS_DIR="/var/log/travel-agency"
DATA_DIR="/var/lib/travel-agency"
S3_BUCKET="prod-resto"

echo "üöÄ D√©but du d√©ploiement Docker de l'application Travel Agency"
echo "üìÖ $(date)"

# V√©rifications pr√©liminaires
echo "üîç V√©rifications pr√©liminaires..."

# V√©rifier que Docker est install√© et fonctionnel
if ! command -v docker >/dev/null 2>&1; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

# V√©rifier que l'utilisateur peut utiliser Docker
if ! docker ps >/dev/null 2>&1; then
    echo "‚ùå L'utilisateur actuel ne peut pas utiliser Docker"
    echo "‚ÑπÔ∏è  Tentative d'ajout de l'utilisateur au groupe docker..."
    sudo usermod -aG docker "$USER"
    echo "‚ö†Ô∏è  Red√©marrage n√©cessaire pour prendre en compte les permissions Docker"
fi

# V√©rifier que sudo fonctionne sans mot de passe
if ! sudo -n true >/dev/null 2>&1; then
    echo "‚ùå sudo n'est pas configur√© sans mot de passe"
    exit 1
fi

echo "‚úÖ V√©rifications termin√©es"

# Cr√©er les r√©pertoires n√©cessaires
sudo mkdir -p "$APP_DIR" "$LOGS_DIR" "$DATA_DIR"
sudo chown -R 1000:1000 "$LOGS_DIR" "$DATA_DIR"

# Arr√™ter et supprimer le conteneur existant
if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
    echo "üõë Arr√™t du conteneur existant..."
    docker stop "$CONTAINER_NAME" || true
    docker rm "$CONTAINER_NAME" || true
fi

# T√©l√©charger les fichiers depuis S3
echo "üì• T√©l√©chargement des fichiers..."
cd "$APP_DIR"

# T√©l√©chargement avec aws cli (utilise le r√¥le IAM de l'instance)
if command -v aws >/dev/null 2>&1; then
    echo "üì¶ Utilisation d'AWS CLI..."
    sudo aws s3 cp "s3://$S3_BUCKET/app/Dockerfile" ./Dockerfile
    sudo aws s3 cp "s3://$S3_BUCKET/app/travel-agency-1.0.1-SNAPSHOT.jar" ./travel-agency-1.0.1-SNAPSHOT.jar
else
    echo "üì¶ Utilisation de curl..."
    # Fallback avec curl si AWS CLI n'est pas disponible
    sudo curl -o ./Dockerfile "https://s3.eu-west-3.amazonaws.com/$S3_BUCKET/app/Dockerfile"
    sudo curl -o ./travel-agency-1.0.1-SNAPSHOT.jar "https://s3.eu-west-3.amazonaws.com/$S3_BUCKET/app/travel-agency-1.0.1-SNAPSHOT.jar"
fi

# V√©rifier que les fichiers ont √©t√© t√©l√©charg√©s
if [[ ! -f "./Dockerfile" ]] || [[ ! -f "./travel-agency-1.0.1-SNAPSHOT.jar" ]]; then
    echo "‚ùå Erreur: Fichiers non t√©l√©charg√©s depuis S3"
    ls -la ./
    exit 1
fi

echo "‚úÖ Fichiers t√©l√©charg√©s avec succ√®s"

# Construire l'image Docker
echo "üî® Construction de l'image Docker..."
docker build -t "$IMAGE_NAME" .

# D√©marrer le nouveau conteneur avec volumes et variables d'environnement
echo "üöÄ D√©marrage du conteneur..."
docker run -d \
    --name "$CONTAINER_NAME" \
    --restart unless-stopped \
    -p 8080:8080 \
    -v "$LOGS_DIR:/app/logs" \
    -v "$DATA_DIR:/app/data" \
    -e SERVER_PORT=8080 \
    -e LOGGING_FILE_PATH=/app/logs/application.log \
    -e LOGGING_LEVEL_ROOT=INFO \
    -e DB_URL="${DB_URL}" \
    -e DB_USER="${DB_USER}" \
    -e DB_PASSWORD="${DB_PASSWORD}" \
    -e JWT_SECRET="${JWT_SECRET}" \
    -e MAIL_HOST="${MAIL_HOST}" \
    -e MAIL_PORT="${MAIL_PORT}" \
    -e MAIL_USER="${MAIL_USER}" \
    -e MAIL_PASSWORD="${MAIL_PASSWORD}" \
    "$IMAGE_NAME"

echo "‚úÖ D√©ploiement termin√© avec succ√®s !"
echo "üìã Logs disponibles dans : $LOGS_DIR"
echo "üíæ Donn√©es persist√©es dans : $DATA_DIR"

# V√©rifier le statut du conteneur
sleep 5
if docker ps | grep "$CONTAINER_NAME" > /dev/null; then
    echo "‚úÖ Conteneur d√©marr√© avec succ√®s"
    docker logs --tail 20 "$CONTAINER_NAME"
else
    echo "‚ùå Erreur lors du d√©marrage du conteneur"
    docker logs "$CONTAINER_NAME"
    exit 1
fi
