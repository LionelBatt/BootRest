name: Travel Agency CI/CD with Maven and EC2 Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  S3_BUCKET: prod-resto
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  APP_VERSION: 1.0.1-SNAPSHOT

jobs:
  test:
    runs-on: ubuntu-latest
    name: Tests et Qualit√© du Code
    
    steps:
    - name: üì• Checkout du code
      uses: actions/checkout@v4

    - name: ‚òï Configuration JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: üì¶ Cache des d√©pendances Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: üß™ Ex√©cution des tests
      run: mvn -B test --file pom.xml

  qodana:
    runs-on: ubuntu-latest
    name: Analyse de la qualit√© du code avec Qodana
    permissions:
      contents: write
      pull-requests: write
      checks: write
    
    steps:
    - name: üì• Checkout du code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: üîç Analyse Qodana
      uses: JetBrains/qodana-action@v2025.1
      with:
        pr-mode: false
      env:
        QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_976312456 }}
        QODANA_ENDPOINT: 'https://qodana.cloud'
      
  build:
    runs-on: ubuntu-latest
    needs: [test, qodana]
    name: Construction de l'application
    
    steps:
    - name: üì• Checkout du code
      uses: actions/checkout@v4

    - name: ‚òï Configuration JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: üì¶ Cache des d√©pendances Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: üî® Construction avec Maven
      run: mvn -B package -DskipTests --file pom.xml

    - name: üìã V√©rification de l'artifact
      run: |
        ls -la target/
        echo "JAR cr√©√©: $(ls target/*.jar | grep -v original)"

    - name: üíæ Sauvegarde de l'artifact
      uses: actions/upload-artifact@v4
      with:
        name: travel-agency-jar
        path: target/travel-agency-${{ env.APP_VERSION }}.jar
        retention-days: 30

  deploy-redis:
    runs-on: ubuntu-latest
    needs: build
    name: D√©ploiement Redis Container
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: üì• Checkout du code
      uses: actions/checkout@v4

    - name: üîß Configuration des credentials AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: üîë Configuration de la cl√© SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $(aws ec2 describe-instances --instance-ids ${{ env.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text) >> ~/.ssh/known_hosts

    - name: üìù Cr√©ation du script de d√©ploiement Redis
      run: |
        chmod +x .github/scripts/create-redis-deployment-script.sh
        ./.github/scripts/create-redis-deployment-script.sh \
          "${{ secrets.REDIS_PASSWORD || 'rootroot' }}"

    - name: üê≥ D√©ploiement Redis sur EC2
      run: |
        EC2_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        chmod +x .github/scripts/deploy-redis-to-ec2.sh
        ./.github/scripts/deploy-redis-to-ec2.sh "$EC2_IP"

  deploy:
    runs-on: ubuntu-latest
    needs: [build, deploy-redis]
    name: D√©ploiement Application sur EC2
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: üì• Checkout du code
      uses: actions/checkout@v4

    - name: üì¶ R√©cup√©ration de l'artifact
      uses: actions/download-artifact@v4
      with:
        name: travel-agency-jar
        path: ./

    - name: üîß Configuration des credentials AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: ü™£ Cr√©ation du bucket S3 temporaire
      run: |
        BUCKET_NAME="travel-agency-deploy-$(date +%Y%m%d%H%M%S)"
        echo "S3_BUCKET_TEMP=$BUCKET_NAME" >> $GITHUB_ENV
        aws s3 mb s3://$BUCKET_NAME --region ${{ secrets.AWS_REGION }}
        aws s3api put-public-access-block \
          --bucket $BUCKET_NAME \
          --public-access-block-configuration \
          "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
        aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::'$BUCKET_NAME'/app/*"
            }
          ]
        }'

    - name: üîë Configuration de la cl√© SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $(aws ec2 describe-instances --instance-ids ${{ env.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text) >> ~/.ssh/known_hosts

    - name: üì§ Upload JAR vers S3
      run: |
        aws s3 cp travel-agency-${{ env.APP_VERSION }}.jar s3://${S3_BUCKET_TEMP}/app/
        echo "‚úÖ JAR upload√© vers S3: ${S3_BUCKET_TEMP}"

    - name: üìù Cr√©ation du script de d√©ploiement
      run: |
        chmod +x .github/scripts/create-deployment-script.sh
        ./.github/scripts/create-deployment-script.sh \
          "${{ secrets.DB_URL || 'jdbc:mysql://localhost:5432/travel_db' }}" \
          "${{ secrets.DB_USER || 'travel_user' }}" \
          "${{ secrets.DB_PASSWORD || 'travel_password_123' }}" \
          "${{ secrets.JWT_SECRET || 'myVeryLongSecretKeyForJwtTokensAtLeast32CharactersLong123456789' }}" \
          "${{ secrets.MAIL_HOST || 'smtp.gmail.com' }}" \
          "${{ secrets.MAIL_USER || 'your.email@gmail.com' }}" \
          "${{ secrets.MAIL_PASSWORD || 'your_app_password' }}" \
          "${{ secrets.REDIS_HOST || 'localhost' }}" \
          "${{ secrets.REDIS_PASSWORD || 'rootroot' }}" \
          "${S3_BUCKET_TEMP}" \
          "${{ secrets.AWS_REGION }}" \
          "${{ env.APP_VERSION }}"

    - name: üöÄ D√©ploiement sur EC2
      run: |
        EC2_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        chmod +x .github/scripts/deploy-to-ec2.sh
        ./.github/scripts/deploy-to-ec2.sh "$EC2_IP"

    - name: üßπ Nettoyage du bucket temporaire
      if: always()
      run: |
        chmod +x .github/scripts/cleanup-aws-resources.sh
        ./.github/scripts/cleanup-aws-resources.sh "${S3_BUCKET_TEMP}"
